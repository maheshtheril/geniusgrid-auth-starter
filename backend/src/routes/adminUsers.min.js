// routes/adminUsers.min.js
import express from "express";
import { pool } from "../db/pool.js";
import { requireAuth } from "../middleware/requireAuth.js";

const router = express.Router();

router.get("/api/admin/users", requireAuth, async (req, res) => {
  try {
    const tenantId =
      req.session?.tenantId || req.session?.tenant_id || req.get("x-tenant-id");
    if (!tenantId) return res.status(401).json({ message: "Unauthorized" });

    const page = Math.max(1, parseInt(req.query.page || "1", 10));
    const pageSize = Math.min(100, Math.max(1, parseInt(req.query.page_size || "25", 10)));
    const sortBy = String(req.query.sort_by || "id").toLowerCase();
    const sortDir = String(req.query.sort_dir || "desc").toLowerCase() === "asc" ? "asc" : "desc";
    const offset = (page - 1) * pageSize;

    // Only sort by columns that exist
    const SORTABLE = {
      id: "u.id",
      email: "u.email",
      name: "u.name",
    };
    const sortCol = SORTABLE[sortBy] || SORTABLE.id;

    const sql = `
      SELECT
        u.id, u.email, u.name,
        COUNT(*) OVER() AS total_rows
      FROM res_users u
      WHERE u.tenant_id = $1
      ORDER BY ${sortCol} ${sortDir}
      LIMIT $2 OFFSET $3
    `;

    const { rows } = await pool.query(sql, [tenantId, pageSize, offset]);
    const total = rows[0]?.total_rows ? Number(rows[0].total_rows) : 0;

    res.json({
      page,
      page_size: pageSize,
      total,
      data: rows.map(r => ({
        id: r.id,
        email: r.email,
        name: r.name,
        // optional: keep this line if your UI still expects `full_name`
        // full_name: r.name,
      })),
    });
  } catch (err) {
    console.error("admin/users failed:", err?.stack || err);
    res.status(500).json({ message: "Failed to list users" });
  }
});

export default router;
